basePath: /v1
definitions:
  requests.CreateUserReq:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  requests.UserReq:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  responses.SuccessRes:
    properties:
      success_code:
        type: string
      success_message:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: karchu.onrender.com
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: All APIs related to Karchu.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Karchu API
  version: "1.0"
paths:
  /categories/all:
    post:
      consumes:
      - application/json
      description: returns array of categories
      parameters:
      - description: enter Email,Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: list of categories
          schema:
            items:
              type: string
            type: array
      summary: Get categories of user
      tags:
      - Categories
  /categories/n:
    post:
      consumes:
      - application/json
      description: returns array of categories
      parameters:
      - description: enter Email,Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: list of categories
          schema:
            items:
              type: string
            type: array
      summary: Get categories of user
      tags:
      - Categories
  /user/:
    post:
      consumes:
      - application/json
      description: creates a user
      parameters:
      - description: enter Email, Name and Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessRes'
      summary: create a user
      tags:
      - Users
  /user/auth:
    post:
      consumes:
      - application/json
      description: returns userId
      parameters:
      - description: enter Email and Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: User Id
          schema:
            type: int
      summary: Authorizes the user creds
      tags:
      - Users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
